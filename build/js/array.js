function zeros(size) {
    return Array.apply(null, Array(size)).map(Number.prototype.valueOf, 0);
}
exports.zeros = zeros;
function sum(a1) {
    return a1.reduce(function (a, b) {
        return a + b;
    }, 0);
}
exports.sum = sum;
function squareSum(a1) {
    return a1.reduce(function (a, b) {
        return a + Math.pow(b, 2);
    }, 0);
}
exports.squareSum = squareSum;
function mean(a1) {
    return sum(a1) / a1.length;
}
exports.mean = mean;
function rootMeanSquare(a1) {
    return Math.sqrt(squareSum(a1));
}
exports.rootMeanSquare = rootMeanSquare;
function add() {
    var arrays = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arrays[_i - 0] = arguments[_i];
    }
    var ret = [], size = arrays[0].length;
    arrays.forEach(function (a) {
        if (size !== a.length) {
            throw new Error('The size of the arrays must be the same');
        }
    });
    for (var i = 0; i < arrays[0].length; i++) {
        ret[i] = 0;
        for (var j = 0; j < arrays.length; j++) {
            ret[i] += arrays[j][i];
        }
    }
    return ret;
}
exports.add = add;
function addScalar(a1, s) {
    var ret = [];
    for (var i = 0; i < a1.length; i++) {
        ret[i] = a1[i] + s;
    }
    return ret;
}
exports.addScalar = addScalar;
function sub() {
    var arrays = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arrays[_i - 0] = arguments[_i];
    }
    var ret = [], size = arrays[0].length;
    arrays.forEach(function (a) {
        if (size !== a.length) {
            throw new Error('The size of the arrays must be the same');
        }
    });
    for (var i = 0; i < arrays[0].length; i++) {
        ret[i] = arrays[0][i];
        for (var j = 1; j < arrays.length; j++) {
            ret[i] -= arrays[j][i];
        }
    }
    return ret;
}
exports.sub = sub;
function multiply() {
    var arrays = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arrays[_i - 0] = arguments[_i];
    }
    var ret = [], size = arrays[0].length;
    arrays.forEach(function (a) {
        if (size !== a.length) {
            throw new Error('The size of the arrays must be the same');
        }
    });
    for (var i = 0; i < arrays[0].length; i++) {
        ret[i] = 1;
        for (var j = 0; j < arrays.length; j++) {
            ret[i] *= arrays[j][i];
        }
    }
    return ret;
}
exports.multiply = multiply;
function multiplyByScalar(a1, scalar) {
    var ret = [];
    for (var i = 0; i < a1.length; i++) {
        ret[i] = a1[i] * scalar;
    }
    return ret;
}
exports.multiplyByScalar = multiplyByScalar;
function shuffle(array) {
    for (var i = array.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
    return array;
}
exports.shuffle = shuffle;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5LnRzIl0sIm5hbWVzIjpbInplcm9zIiwic3VtIiwic3F1YXJlU3VtIiwibWVhbiIsInJvb3RNZWFuU3F1YXJlIiwiYWRkIiwiYWRkU2NhbGFyIiwic3ViIiwibXVsdGlwbHkiLCJtdWx0aXBseUJ5U2NhbGFyIiwic2h1ZmZsZSJdLCJtYXBwaW5ncyI6IkFBQUEsZUFBdUIsSUFBWTtJQUNqQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsRUFBRUEsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDekVBLENBQUNBO0FBRmUsYUFBSyxRQUVwQixDQUFBO0FBRUQsYUFBcUIsRUFBaUI7SUFDcENDLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLE1BQU1BLENBQUNBLFVBQUNBLENBQUNBLEVBQUVBLENBQUNBO1FBQ3BCQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUNmQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUNSQSxDQUFDQTtBQUplLFdBQUcsTUFJbEIsQ0FBQTtBQUVELG1CQUEyQixFQUFpQjtJQUMxQ0MsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsVUFBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0E7UUFDcEJBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO0lBQzVCQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUNSQSxDQUFDQTtBQUplLGlCQUFTLFlBSXhCLENBQUE7QUFFRCxjQUFzQixFQUFpQjtJQUNyQ0MsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsTUFBTUEs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QUVBLENBQUNBO1FBQzFDQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM1Q0EsSUFBSUEsSUFBSUEsR0FBR0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDcEJBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3BCQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUNsQkEsQ0FBQ0E7SUFDREEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7QUFDZkEsQ0FBQ0E7QUFSZSxlQUFPLFVBUXRCLENBQUEiLCJmaWxlIjoiYXJyYXkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gemVyb3MgKHNpemU6IG51bWJlcik6IEFycmF5PG51bWJlcj4ge1xuICByZXR1cm4gQXJyYXkuYXBwbHkobnVsbCwgQXJyYXkoc2l6ZSkpLm1hcChOdW1iZXIucHJvdG90eXBlLnZhbHVlT2YsIDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3VtIChhMTogQXJyYXk8bnVtYmVyPik6IG51bWJlciB7XG4gIHJldHVybiBhMS5yZWR1Y2UoKGEsIGIpID0+IHtcbiAgICByZXR1cm4gYSArIGI7XG4gIH0sIDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlU3VtIChhMTogQXJyYXk8bnVtYmVyPik6IG51bWJlciB7XG4gIHJldHVybiBhMS5yZWR1Y2UoKGEsIGIpID0+IHtcbiAgICByZXR1cm4gYSArIE1hdGgucG93KGIsIDIpO1xuICB9LCAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lYW4gKGExOiBBcnJheTxudW1iZXI+KTogbnVtYmVyIHtcbiAgcmV0dXJuIHN1bShhMSkgLyBhMS5sZW5ndGg7IFxufVxuXG5leHBvcnQgZnVuY3Rpb24gcm9vdE1lYW5TcXVhcmUgKGExOiBBcnJheTxudW1iZXI+KTogbnVtYmVyIHtcbiAgcmV0dXJuIE1hdGguc3FydChzcXVhcmVTdW0oYTEpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZCAoLi4uYXJyYXlzOiBudW1iZXJbXVtdKTogQXJyYXk8bnVtYmVyPiB7XG4gIGxldCByZXQgPSBbXSxcbiAgICAgIHNpemUgPSBhcnJheXNbMF0ubGVuZ3RoO1xuICAgICAgXG4gIGFycmF5cy5mb3JFYWNoKChhKSA9PiB7XG4gICAgaWYgKHNpemUgIT09IGEubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBzaXplIG9mIHRoZSBhcnJheXMgbXVzdCBiZSB0aGUgc2FtZScpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5c1swXS5sZW5ndGg7IGkrKykgeyBcbiAgICByZXRbaV0gPSAwOyAgXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBhcnJheXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIHJldFtpXSArPSBhcnJheXNbal1baV07ICAgICBcbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiByZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRTY2FsYXIgKGExOiBBcnJheTxudW1iZXI+LCBzOiBudW1iZXIpOiBBcnJheTxudW1iZXI+IHtcbiAgbGV0IHJldCA9IFtdO1xuICBcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhMS5sZW5ndGg7IGkrKykge1xuICAgIHJldFtpXSA9IGExW2ldICsgcztcbiAgfVxuICBcbiAgcmV0dXJuIHJldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YiAoLi4uYXJyYXlzOiBudW1iZXJbXVtdKTogQXJyYXk8bnVtYmVyPiB7XG4gIGxldCByZXQgPSBbXSxcbiAgICAgIHNpemUgPSBhcnJheXNbMF0ubGVuZ3RoO1xuICAgICAgXG4gIGFycmF5cy5mb3JFYWNoKChhKSA9PiB7XG4gICAgaWYgKHNpemUgIT09IGEubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBzaXplIG9mIHRoZSBhcnJheXMgbXVzdCBiZSB0aGUgc2FtZScpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5c1swXS5sZW5ndGg7IGkrKykgeyBcbiAgICByZXRbaV0gPSBhcnJheXNbMF1baV07ICBcbiAgICBmb3IgKGxldCBqID0gMTsgaiA8IGFycmF5cy5sZW5ndGg7IGorKykge1xuICAgICAgcmV0W2ldIC09IGFycmF5c1tqXVtpXTsgICAgIFxuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIHJldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5ICguLi5hcnJheXM6IG51bWJlcltdW10pOiBBcnJheTxudW1iZXI+IHtcbiAgbGV0IHJldCA9IFtdLFxuICAgICAgc2l6ZSA9IGFycmF5c1swXS5sZW5ndGg7XG4gICAgICBcbiAgYXJyYXlzLmZvckVhY2goKGEpID0+IHtcbiAgICBpZiAoc2l6ZSAhPT0gYS5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHNpemUgb2YgdGhlIGFycmF5cyBtdXN0IGJlIHRoZSBzYW1lJyk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXlzWzBdLmxlbmd0aDsgaSsrKSB7IFxuICAgIHJldFtpXSA9IDE7ICBcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFycmF5cy5sZW5ndGg7IGorKykge1xuICAgICAgcmV0W2ldICo9IGFycmF5c1tqXVtpXTsgICAgIFxuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIHJldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5QnlTY2FsYXIgKGExOiBBcnJheTxudW1iZXI+LCBzY2FsYXI6IG51bWJlcik6IEFycmF5PG51bWJlcj4ge1xuICBsZXQgcmV0ID0gW107XG4gIFxuICBmb3IgKGxldCBpID0gMDsgaSA8IGExLmxlbmd0aDsgaSsrKSB7XG4gICAgcmV0W2ldID0gYTFbaV0gKiBzY2FsYXI7XG4gIH1cbiAgXG4gIHJldHVybiByZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaHVmZmxlPFQ+IChhcnJheTogQXJyYXk8VD4pOiBBcnJheTxUPiB7XG4gIGZvciAobGV0IGkgPSBhcnJheS5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XG4gICAgbGV0IGogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoaSArIDEpKTtcbiAgICBsZXQgdGVtcCA9IGFycmF5W2ldO1xuICAgIGFycmF5W2ldID0gYXJyYXlbal07XG4gICAgYXJyYXlbal0gPSB0ZW1wO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=